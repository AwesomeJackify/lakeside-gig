---
export const prerender = false;

import { Icon } from "astro-icon/components";

import Layout from "../../layouts/Layout.astro";
import config from "../../data/config.json";

import DangerousHtml from "../../components/DangerousHtml";
import SelectVariant from "../../components/SelectVariant";

import { createClient } from "../../utils";
import getProductByHandleQuery from "../../queries/getProductByHandleQuery";
import { Image } from "astro:assets";
import { DEFAULT_COUNTRY } from "../../utils";

const { handle } = Astro.params;

const { data } = await createClient(
  import.meta.env.SHOPIFY_PUBLIC_ACCESS_TOKEN
).request(getProductByHandleQuery, {
  variables: {
    handle: handle,
    country: DEFAULT_COUNTRY,
  },
});
---

<Layout title={config.businessName} description={config.description}>
  <section class="max-md:hidden">
    <div class="grid grid-cols-3 px-2 gap-4">
      <div class="flex flex-col gap-4 justify-center top-0 sticky h-screen">
        <div class="text-xs">
          <DangerousHtml code={data.productByHandle.descriptionHtml} />
        </div>
      </div>
      <div class="flex flex-col">
        {
          data.productByHandle.images.edges.map((image: any) => (
            <Image
              inferSize
              class="h-full w-full object-cover aspect-[2/3]"
              src={image.node.url}
              alt={image.altText ? image.altText : config.businessName}
            />
          ))
        }
      </div>

      <div
        class="justify-center items-center flex flex-col sticky top-0 h-screen"
      >
        <SelectVariant
          client:load
          token={import.meta.env.SHOPIFY_PUBLIC_ACCESS_TOKEN}
          handle={handle || ""}
          client:only="react"
        />
      </div>
    </div>
  </section>
  <section class="md:hidden flex flex-col">
    <div class="justify-start items-center flex flex-col">
      <SelectVariant
        client:load
        token={import.meta.env.SHOPIFY_PUBLIC_ACCESS_TOKEN}
        handle={handle || ""}
        client:only="react"
      />
    </div>
    <Image
      inferSize
      class="h-full w-full object-cover aspect-[2/3]"
      src={data.productByHandle.featuredImage.url}
      alt={data.productByHandle.featuredImage.altText
        ? data.productByHandle.featuredImage.altText
        : config.businessName}
    />
    <div class="text-sm p-2">
      <DangerousHtml code={data.productByHandle.descriptionHtml} />
    </div>
    <div class="flex flex-col">
      {
        data.productByHandle.images.edges
          .slice(1)
          .map((image: any) => (
            <Image
              inferSize
              class="h-full w-full object-cover aspect-[2/3]"
              src={image.node.url}
              alt={image.altText ? image.altText : config.businessName}
            />
          ))
      }
    </div>
  </section>
</Layout>
